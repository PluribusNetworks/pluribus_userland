#!/usr/bin/ksh

#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# Portions of this file have been derived from OmniOS Kayak.
#
# Copyright 2017 OmniTI Computer Consulting, Inc.  All rights reserved.
# Copyright 2017 Pluribus Networks Inc.  All rights reserved.
#

POWEROFF=true
opt=$1
[ "x$opt" = "-n" ] && POWEROFF=false
CONFIG=sysinstall.conf
SERVER_URL=""
ALTROOT=/mnt
ROOTPW="$5$z4qjnS.X$P3bQSLNmyaUaLfiTaJwf.LUyu8kCXmV2fphn55YKt00"
HOSTNAME="netvisor"
TZ=US/Pacific
LANG=en_US.UTF-8
KEYBOARD_LAYOUT=US-English
LOG_SEWTUP=0
HAVE_DISPLAY=""
PARTNUM=1
LOCAL_CFG_PATH=""
SWAP_SIZE=0
DUMP_SIZE=0
ROOTBE=netvisor
CREATE_FACTORY_RESET=n
#
# Empty OSCONSOLE means auto-detect
# This can be overridden in sysinstall.conf
#
OSCONSOLE=""

BE_PRINT_ERR=true
export BE_PRINT_ERR
TERM=sun-color
export TERM

RUNNING_IN_SMF=false
[ "x$SMF_FMRI" != "x" ] && RUNNING_IN_SMF=true

chroot_exec() {
	ROOT=$1
	shift
	cmd="$@"

	mount -F lofs /devices $ROOT/devices
	mount -F lofs /dev $ROOT/dev
	eval "$cmd"
	umount $ROOT/dev
	umount $ROOT/devices
}

console_log() {
	exec 4>/dev/console
	exec 1>>${1}
	exec 2>>${1}
	INSTALL_LOG=${1}
	LOG_SETUP=1
}

copy_install_log() {
	if [[ -n "$INSTALL_LOG" ]]
	then
		mkdir -p $ALTROOT/var/log/install/
		cp $INSTALL_LOG $ALTROOT/var/log/install/sysinstall.log
	fi
}

output_log() {
	if [[ "$LOG_SETUP" -eq "0" ]]
	then
		exec 4>/dev/null
		LOG_SETUP=1
	fi
}

log() {
	output_log
	TS=`date +%Y/%m/%d-%H:%M:%S`
	echo "[$TS] $*" 1>&4
	echo "[$TS] $*"
}

bomb() {
	log
	log ======================================================
	log "$*"
	log ======================================================
	log
	if [[ -n "$INSTALL_LOG" ]]
	then
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		log "!                                                              !"
		log "!     INSTALLATION FAILED. PLEASE SAVE INSTALL LOG.            !"
		log "!     INSTRUCTIONS:                                            !"
		log "!                                                              !"
		log "!     1) Press ENTER                                           !"
		log "!     2) At 'Login: ' prompt type root and press ENTER         !"
		log "!     3) At 'password: ' prompt type test123 and press ENTER   !"
		log "!     4) scp $INSTALL_LOG <username>@<some host>:/<path>"
		log "!                                                              !"
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		if [ "$RUNNING_IN_SMF" = "true" ]
		then
			svcadm disable $SMF_FMRI
		fi
	elif [ "$RUNNING_IN_SMF" = "true" ]
	then
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		log "!                                                              !"
		log "!     INSTALLATION FAILED. PRESS ENTER TO POWER OFF.           !"
		log "!                                                              !"
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		read dmy < /dev/console
		/usr/sbin/shutdown -y -g 0 -i 5
	else
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
		log "!                                                              !"
		log "!     INSTALLATION FAILED.                                     !"
		log "!                                                              !"
		log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	fi
	exit 1
}

post_boot() {
	[[ -f $ALTROOT/.initialboot ]] || touch $ALTROOT/.initialboot
	echo "$*" >> $ALTROOT/.initialboot
}

post_boot_final() {
	if [[ -f $ALTROOT/.initialboot_additional ]]
	then
		cat $ALTROOT/.initialboot_additional >> $ALTROOT/.initialboot
		rm $ALTROOT/.initialboot_additional
	fi
}

force_dhcp() {
	wait=$1
	if [ "$wait" != "waitonly" ]
	then
		log "Forcing all interfaces into DHCP..."
		/sbin/ifconfig -a plumb 2> /dev/null
		# for the logs
		for iface in `/sbin/dladm show-phys -o device -p`
		do
			log "Starting DHCP on $iface ..."
			/sbin/ifconfig $iface dhcp &
		done
	fi

	if [ "$wait" != "nowait" ]
	then
		count=0
		while [[ -z $(/sbin/dhcpinfo BootSrvA) ]]
		do
			log "Waiting for dhcpinfo..."
			sleep 1
			count=$((count + 1))
			[ $count -eq 10 ] && break
		done
	fi
	sleep 1
}

partition_disk() {
	dev=$1
	tmp1=/tmp/ptable.1.$$
	tmp2=/tmp/ptable.2.$$

	PDSK0="/dev/dsk/${dev}p0"
	P0="/dev/rdsk/${dev}p0"

	#
	# Skip if we have a solaris partition
	#
	#fdisk -W $tmp1 $P0
	#solaris_part=`cat $tmp1 | awk 'BEGIN {pnum = 0; count = 0} {
	#	if (substr($0, 1, 1) != "*" && length($0) > 0) {
	#		count = count + 1;
	#	}
	#	if ($1 == "191") {
	#		pnum = count;
	#	} } END { print pnum; }'`
	#if [ $solaris_part -gt 0 ]
	#then
	#	echo "A Solaris partition already exists. Re-using it."
	#	PARTNUM=$solaris_part
	#	return 0
	#fi

	# Erase non-Solaris label, if any
	dd if=/dev/zero of=$PDSK0 bs=512 count=32

	# Default partition table. One Solaris partition for whole disk
	fdisk -B $P0

	# Set it active
	fdisk -W $tmp1 $P0
	grep -v \* "$tmp1" | grep -v '^[         ]*$' > "$tmp2"
	rm -f "$tmp1"
	awk '{
		if ( $1 == "191" )
			printf "%s 128 %s %s %s %s %s %s %s %s\n", $1, \
			$3, $4, $5, $6, $7, $8, $9, $10
		else printf "%s 0 %s %s %s %s %s %s %s %s\n", \
			$1, $3, $4, $5, $6, $7, $8, $9, $10
	}' "$tmp2" > "$tmp1"

	fdisk -F "$tmp1" "$P0"
	fdisk -W "$tmp2" "$P0"

	#
	# The fdisk -B would have created a default SMI Label.
	# Now create root partition.  We want to find number of cylinders in backup
	# partition from label created by fdisk -B and then generate root partition
	# using whole disk minus cylinder 1
	#
	acyls=`prtvtoc "$P0" | grep accessible | awk '{ print $2 }'`
	cyls=$((acyls - 1))
	format -e "$P0" >/dev/null <<EOF
pa
0
root
wm
1
${cyls}c
label
0
y
EOF

	ptab=`cat "$tmp2"`
	log "Created default partition table on $dev"
	echo "$ptab" >> $INSTALL_LOG
	rm -f "$tmp1" "$tmp2"
}

discover_config() {
	log "Config discovery ..."

	#
	# Start DHCP but do not wait for DHCP options
	#
	force_dhcp nowait

	for loc in /.cdrom/local_config /local_config
	do
		if [ -d $loc ]
		then
			LOCAL_CFG_PATH=$loc
			break
		fi
	done

	if [ -f ${LOCAL_CFG_PATH}/$CONFIG ]
	then
		log "Found local ${loc}/$CONFIG"
		cp ${loc}/$CONFIG /tmp/$CONFIG
		return 0
	fi

	#
	# Now we need to probe network so wait for BootSrvA option first
	#
	force_dhcp waitonly
	BOOTSRVA=`/sbin/dhcpinfo BootSrvA`
	CFG_IP=""
	[ -f ${LOCAL_CFG_PATH}/config_ip ] && CFG_IP=`cat ${LOCAL_CFG_PATH}/config_ip`
	DEF_HOST=install-server.com
	DEF_IP=10.20.3.9

	for src in $BOOTSRVA $CFG_IP $DEF_HOST $DEF_IP
	do
		log "Trying http://$src/pn-illumos/$CONFIG"
		curl -s http://$src/pn-illumos/$CONFIG > /tmp/$CONFIG
		if [ $? -eq 0 ]
		then
			SERVER_URL=http://$src/pn-illumos
			log "Using server URL: $SERVER_URL"
			return 0
		fi
	done
	return 1
}

get_memsize() {
	# Aim for 25% of physical memory (minimum 1G)
	# prtconf always reports in megabytes
	mem=`/usr/sbin/prtconf | /bin/awk '/^Memory size/ { print $3 }'`
	if [[ $mem -lt 4096 ]]
	then
		vsize=1
	else
		quart=`echo "scale=1;$mem/4096" | /bin/bc`
		vsize=`printf %0.f $quart`
	fi
	echo $vsize
}

get_rpool_free() {
	zfsavail=`/sbin/zfs list -H -o avail $RPOOL`
	if [[ ${zfsavail:(-1)} = "G" ]]
	then
		zfsavail=`echo $zfsavail | sed 's/G//'`
		avail=`printf %0.f ${zfsavail}`
	elif [[ ${zfsavail:(-1)} = "T" ]]
	then
		zfsavail=`echo $zfsavail | sed 's/T//'`
		gigs=`echo "scale=1;${zfsavail}*1024" | /bin/bc`
		avail=`printf %0.f $gigs`
	else
		# If we get here, there's too little space left to be usable
		avail=0
	fi
	echo $avail
}

make_swap_dump() {
	size=`get_memsize`
	totalvols=""
	usable=""
	finalsize=""
	savecore=""

	# We're creating both swap and dump volumes of the same size unless
	# specified otherwise
	[ $SWAP_SIZE -le 0 ] && SWAP_SIZE=$size
	[ $DUMP_SIZE -le 0 ] && DUMP_SIZE=$size
	let totalvols=${SWAP_SIZE}+${DUMP_SIZE}

	# We want at least 10GB left free after swap/dump
	# If we can't make swap/dump at least 1G each, don't bother
	let usable=`get_rpool_free`-10
	if [[ $usable -lt 2 ]]
	then
		log "Not enough free space for reasonably-sized swap and dump; not creating either."
		return 0
	fi

	# If the total of swap and dump is greater than the usable free space,
	# make swap and dump each take half but don't enable savecore
	if [[ $totalvols -ge $usable ]]
	then
		let finalsize=${usable}/2
		SWAP_SIZE=$finalsize
		DUMP_SIZE=$finalsize
		savecore="-n"
	else
		savecore="-y"
	fi

	/sbin/zfs create -V ${SWAP_SIZE}G $RPOOL/swap
	[ $? -ne 0 ] && bomb "Failed to create $RPOOL/swap"
	/sbin/zfs create -V ${DUMP_SIZE}G $RPOOL/dump
	[ $? -ne 0 ] && bomb "Failed to create $RPOOL/dump"

	printf "/dev/zvol/dsk/$RPOOL/swap\t-\t-\tswap\t-\tno\t-\n" >> $ALTROOT/etc/vfstab
	post_boot /usr/sbin/dumpadm $savecore -d /dev/zvol/dsk/$RPOOL/dump
	return 0
}

set_root_pwd() {
	gsed -i -e 's%^root::%root:'$ROOTPW':%' $ALTROOT/etc/shadow
}

set_hostname() {
	log "Setting hostname: ${1}"
	/bin/hostname "$1"
	echo "$1" > $ALTROOT/etc/nodename
	head -n 26 $ALTROOT/etc/hosts > /tmp/hosts
	echo "::1\t\t$1" >> /tmp/hosts
	echo "127.0.0.1\t$1" >> /tmp/hosts
	cat /tmp/hosts > $ALTROOT/etc/hosts
}

set_timezone() {
	log "Setting timezone: ${1}"
	sed -i -e "s:^TZ=.*:TZ=${1}:" $ALTROOT/etc/default/init
}

set_lang() {
	log "Setting language: $1"
	sed -i -e "s:^LANG=.*:LANG=${1}:" $ALTROOT/etc/default/init
}

set_keyboard_layout() {
	# Put the new keyboard layout ($1) in
	# "setprop keyboard-layout <foo>" in the newly-installed root's
	# /boot/solaris/bootenv.rc (aka. eeprom(1M) storage for amd64/i386).
	layout=$1
	sed "s/keyboard-layout Unknown/keyboard-layout $layout/g" \
	    < $ALTROOT/boot/solaris/bootenv.rc > /tmp/bootenv.rc
	mv /tmp/bootenv.rc $ALTROOT/boot/solaris/bootenv.rc
	# Also modify the SMF manifest, assuming US-English was set by default.
	sed "s/US-English/$layout/g" \
	    < $ALTROOT/lib/svc/manifest/system/keymap.xml > /tmp/keymap.xml
	cp -f /tmp/keymap.xml $ALTROOT/lib/svc/manifest/system/keymap.xml
}

set_boot_props() {
	#
	# Boot related initial setup
	#
	echo "BE_HAS_GRUB=true" > /etc/default/be
	echo "BE_HAS_GRUB=true" > $ALTROOT/etc/default/be
	mkdir -p /${RPOOL}/boot/grub
	mkdir -p /${RPOOL}/boot/grub/bootsign
	mkdir -p /${RPOOL}/etc
	echo "pool_$RPOOL" > /${RPOOL}/etc/bootsign
	chmod 0444 /${RPOOL}/etc/bootsign
	touch /${RPOOL}/boot/grub/bootsign/pool_$RPOOL
	chmod 0444 /${RPOOL}/boot/grub/bootsign/pool_$RPOOL
}

apply_changes() {
	log "Basic BE setup"
	set_root_pwd
	rm -f $ALTROOT/etc/svc/profile/generic.xml
	ln -s generic_limited_net.xml $ALTROOT/etc/svc/profile/generic.xml
	rm -f $ALTROOT/etc/svc/profile/name_service.xml
	ln -s ns_dns.xml $ALTROOT/etc/svc/profile/name_service.xml
	rm -f $ALTROOT/etc/hostname.*
	rm -f $ALTROOT/etc/dhcp.*

	if [ ! -f $ALTROOT/etc/default/init ]
	then
		echo "TZ=US/Pacific" > $ALTROOT/etc/default/init
		echo "CMASK=022" >> $ALTROOT/etc/default/init
		echo "LANG=en_US.UTF-8" >> $ALTROOT/etc/default/init
	fi

	#
	# Set GRUB related stuff
	#
	set_boot_props

	# Extras from interactive ISO/USB install...
	# arg1 == hostname
	if [[ ! -z $1 ]]
	then
		set_hostname $1
	fi

	# arg2 == timezone
	if [[ ! -z $2 ]]
	then
		set_timezone $2
	fi

	# arg3 == Language
	if [[ ! -z $3 ]]
	then
		set_lang $3
	fi

	# arg4 == Keyboard layout
	if [[ ! -z $4 ]]
	then
		set_keyboard_layout $4
	fi

	#
	# Rerun grub-gen.ksh on reboot
	#
	post_boot /usr/bin/grub-gen.ksh
	post_boot mkdir -p /var/nvOS/log/cores
	return 0
}

make_bootable() {
	disk1=$1
	disk2=$2

	log "Making boot environment bootable"
	zpool set bootfs=$RPOOL/ROOT/$ROOTBE rpool

	# Must do beadm activate first because we're bootstrapping from
	# GRUB.
	beadm activate $ROOTBE || return 1

	# Now populate boot archive
	log "Generating boot archive"
	bootadm update-archive -R $ALTROOT || return 1

	# Our factory-reset snapshot
	[ "$CREATE_FACTORY_RESET" = "y" ] && zfs snapshot $RPOOL/ROOT/${ROOTBE}@factory-reset

	# Update grub onto boot sectors
	log "Installing GRUB"
	installgrub -mf $ALTROOT/boot/grub/stage1 $ALTROOT/boot/grub/stage2 /dev/rdsk/$disk1
	if [ "x$disk2" != "x" ]
	then
		installgrub $ALTROOT/boot/grub/stage1 $ALTROOT/boot/grub/stage2 /dev/rdsk/$disk2
	fi
	return 0
}

get_console_dev() {
	console=`prtconf -v /devices | sed -n '/console/{n;p;}' | cut -f 2 -d \'`
	if [ "x$console" = "x" ]
	then
		console=`prtconf -v /devices | sed -n '/output-device/{n;p;}' | cut -f 2 -d \'`
		if [ "$console" = "screen" ]
		then
			console=text
		fi
	fi
	/usr/sbin/prtconf -F >/dev/null 2>&1
	[ $? -eq 0 ] && HAVE_DISPLAY=yes

	if [ "x$console" != "x" ]
	then
		OSCONSOLE=$console
		log "Detected OSCONSOLE = $OSCONSOLE"
	else
		OSCONSOLE=text
		log "Console device probed empty. Using default OSCONSOLE = $OSCONSOLE"
	fi
}

generate_grub_menu() {
	#
	# Create a default grub menu for the BE. This menu is rebuilt
	# later once the box is rebooted into the BE and further setup
	# operations happen.
	#
	log "Re-building GRUB Menu"
	CONSOLE=console
	TITLE="Pluribus Networks, Inc. Netvisor(R)"
	TITLE_MONITOR="$TITLE Monitor     nvOS(R)"
	TITLE_CONSOLE="$TITLE Console     nvOS(R)"
	MENU=menu.lst
	BACKUP="$MENU.orig"
	TMP="$MENU.tmp"

	GRUBDIR=/${RPOOL}/boot/grub
	if [ ! -d $GRUBDIR ]
	then
		bomb "$GRUBDIR does not exist"
	fi
	PDIR=`pwd`
	cd $GRUBDIR
	[ "x$OSCONSOLE" = "x" ] && get_console_dev

	active_be=$ROOTBE
	[ ! -f $MENU ] && cp $ALTROOT/boot/grub/$MENU $MENU

	#
	# Fetch version info from BE
	#
	for pkg_line in `/usr/bin/pkg -R $ALTROOT info -l pn-nvos`
	do
		if [[ "$pkg_line" =~ "Version:" ]]; then
			vers=`echo $pkg_line | sed -e \
				's/^[ ]*Version:[ ]*\(.*\)$/\1/'`
			maj=`echo $vers | cut -d'.' -f1`
			min=`echo $vers | cut -d'.' -f2`
			mic=`echo $vers | cut -d'.' -f3`
			vers_long=`printf "%d%02d%02d" $maj $min $mic`
		elif [[ "$pkg_line" =~ "Branch:" ]]; then
			branch=`echo $pkg_line | sed -e \
				's/^[ ]*Branch:[ ]*\(.*\)$/\1/'`
			branch=`echo $branch | sed -e 's/'$vers_long'//'`
		fi
        done


	#
	# Default entry selection. If we are booted via a serial console
	# then that becomes default otherwise VGA console. If serial
	# console is booted and VGA is not present then that is the only
	# entry.
	#
	if [ "$OSCONSOLE" != "text" ]
	then
		if [ "$HAVE_DISPLAY" = "yes" ]
		then
			echo "default 1" > $TMP
		else
			echo "default 0" > $TMP
		fi
	else
		echo "default 0" > $TMP
	fi

	#
	# Select a composite terminal now. This gets rebuilt into the correct
	# entries later.
	#
	echo "timeout 7" >> $TMP
	echo "serial --unit=0,1 --speed=9600" >> $TMP
	echo "terminal composite" >> $TMP

	#
	# Now add the VGA entry if console device is present.
	#
	count=0
        if [[ -n "$HAVE_DISPLAY"  ]]
	then
                echo "#========================= $count ===========================
title $TITLE_MONITOR $vers-$branch
findroot (pool_rpool,0,a)
bootfs $RPOOL/ROOT/$ROOTBE
kernel\$ /platform/i86pc/kernel/\$ISADIR/unix -B \$ZFS-BOOTFS
module\$ /platform/i86pc/\$ISADIR/boot_archive
" >> $TMP
		count=$((count + 1))
	fi

	if [ "$OSCONSOLE" != "text" ]
	then
		SERIAL_TTY=$OSCONSOLE
	else
		SERIAL_TTY=ttya
	fi
	SERIAL_BAUD=9600
	echo "#========================= $count ===========================
title $TITLE_CONSOLE $vers-$branch
findroot (pool_rpool,0,a)
bootfs $RPOOL/ROOT/$ROOTBE
kernel\$ /platform/i86pc/kernel/\$ISADIR/unix -B \$ZFS-BOOTFS,console=${SERIAL_TTY},${SERIAL_TTY}-mode=\"${SERIAL_BAUD},8,n,1,-\"
module\$ /platform/i86pc/\$ISADIR/boot_archive
" >> $TMP
	count=$((count + 1))

	if [ ! -e "$BACKUP" ]; then
		/usr/bin/cp $MENU $BACKUP
	fi

	/usr/bin/mv -f $TMP $MENU
	if [ $? -ne 0 ]; then
		cd $PDIR
		bomb "Grub menu update failed!"
	fi
	cd $PDIR
}

#
# Identify the primary disks. Assuming root disks are not NVMe.
#
console_log /tmp/sysinstall.log
get_console_dev
keyboard_layout=${1:-US-English}
SCRATCH=/tmp/di.$$
DEFAULT_ROOT_DISK=""
DEFAULT_MIRROR_DISK=""
ZFS_DATASET_LIST="pn_illumos.img.bz2;ROOT/$ROOTBE;/;noauto"
RPOOL=rpool

#
# Grab the config
#
discover_config
. /tmp/$CONFIG

if [ "x$DEFAULT_ROOT_DISK" = "x" ]
then
	/usr/bin/diskinfo -PH | grep -v 'NVMe' > $SCRATCH
	NUM=`wc -l /tmp/di.$$ | awk '{print $1}'`
	DEFAULT_ROOT_DISK=`awk 'BEGIN {N=1} {if (N==1) { print $1; } N = N + 1; }'  /tmp/di.$$`

	if [ $NUM -gt 1 ]
	then
		DEFAULT_MIRROR_DISK=`awk 'BEGIN {N=1} {if (N==2) { print $1; } N = N + 1; }'  /tmp/di.$$`
	fi
fi

if [ "x$DEFAULT_MIRROR_DISK" != "x" ]
then
	echo "Partitioning disks"
	partition_disk $DEFAULT_ROOT_DISK
	rootdev="${DEFAULT_ROOT_DISK}s0"
	partition_disk $DEFAULT_MIRROR_DISK
	mirrordev="${DEFAULT_MIRROR_DISK}s0"

	# Create mirrored rpool
	log "Creating mirrored $RPOOL on $rootdev $mirrordev"
	zpool create -f $RPOOL mirror $rootdev $mirrordev
else
	echo "Partitioning disk"
	partition_disk $DEFAULT_ROOT_DISK
	rootdev="${DEFAULT_ROOT_DISK}s0"
	mirrordev=""

	# Create non-mirrored rpool
	log "Creating $RPOOL on $rootdev"
	zpool create -f $RPOOL $rootdev
fi

# Set rpool props
log "Setting $RPOOL properties"
zpool set failmode=continue $RPOOL
zfs set compression=on $RPOOL
zfs create $RPOOL/ROOT
zfs set canmount=off $RPOOL/ROOT
zfs set mountpoint=legacy $RPOOL/ROOT
#
# This is defined in sysinstall.conf
# Minimally should include export and export/home
#
for ds_spec in $ADDITIONAL_DATASETS
do
	_OIFS="$IFS"
	IFS=";"
	set -- $ds_spec
	IFS="$_OIFS"
	ds=$1
	mntpt=$2
	log "Creating additional dataset $RPOOL/$ds"
	zfs create $RPOOL/$ds
	[ $? -ne 0 ] && bomb "ZFS dataset creation failed"
	zfs set mountpoint=$mntpt $RPOOL/$ds
	[ $? -ne 0 ] && bomb "ZFS dataset mountpoint setting failed"
done


# Now import the root dataset and any additional ones
log "Fetching ZFS datasets"
root_found=0
for ds_spec in $ZFS_DATASET_LIST
do
	_OIFS="$IFS"
	IFS=";"
	set -- $ds_spec
	IFS="$_OIFS"
	ds=$1
	target=$2
	mntpt=$3
	canmount=$4
	log "Fetching $ds ..."
	if [ -f ${LOCAL_CFG_PATH}/$ds ]
	then
		sz=`stat -c %s ${LOCAL_CFG_PATH}/$ds`
		cat ${LOCAL_CFG_PATH}/$ds | pv -s $sz -B 128m -w 78 2>/dev/console | bzip2 -dc | zfs receive -u $RPOOL/$target

	elif [ "x$SERVER_URL" != "x" ]
	then
		sz=`curl -sI ${SERVER_URL}/${ds} | grep Content-Length | awk '{ print $2 }' | sed 's///'`
		curl -s ${SERVER_URL}/${ds} | pv -s $sz -B 128m -w 78 2>/dev/console | bzip2 -dc | zfs receive -u $RPOOL/$target
	else
		bomb "ZFS dataset $ds not found"
	fi
	[ $? -ne 0 ] && bomb "!!Failed to receive ZFS dataset $ds"
	zfs set canmount=$canmount $RPOOL/$target
	zfs set mountpoint=$mntpt $RPOOL/$target
	[[ $target == ROOT/$ROOTBE ]] && root_found=1
done

[ $root_found -ne 1 ] && bomb "No ROOT dataset specified. Required for a bootable system!"

log "Preparing boot environment"
mkdir -p $ALTROOT
#
# We can't call beadm mount $ROOTBE $ALTROOT here
# This needs a fix in libbe to call mount properly
# so that it does not depend on the type of rootfs
# which in livecd is UFS.
# So we use a tiny helper that calls mount() correctly.
#
/usr/bin/mnt_zfs $RPOOL/ROOT/$ROOTBE $ALTROOT

# Create any additional directories
for dir in $ADDITIONAL_DIRECTORIES
do
	mkdir -p $ALTROOT/$dir
done

cp $ALTROOT/lib/svc/seed/global.db $ALTROOT/etc/svc/repository.db
touch $ALTROOT/reconfigure
chmod 0600 $ALTROOT/etc/svc/repository.db
chown root:sys $ALTROOT/etc/svc/repository.db
/usr/sbin/devfsadm -r $ALTROOT
[[ -L $ALTROOT/dev/msglog ]] || \
    ln -s ../devices/pseudo/sysmsg@0:msglog $ALTROOT/dev/msglog

log "Creating swap and dump"
make_swap_dump
zfs destroy $RPOOL/ROOT/${ROOTBE}@img

apply_changes $HOSTNAME $TZ $LANG $KEYBOARD_LAYOUT

# Remove hostid file so that new one generates during reboot
rm -f $ALTROOT/etc/hostid

# Fixup path_to_inst to default
echo "#path_to_inst_bootstrap_1" > $ALTROOT/etc/path_to_inst

# Cleanup zpool.cache if any
rm -f $ALTROOT/etc/zfs/zpool.cache

make_bootable "$rootdev" "$mirrordev"
[ $? -ne 0 ] && bomb "Boot activation failed"
generate_grub_menu
post_boot_final
log "Done. BE Setup complete."
copy_install_log
#
# beadm unmount $ROOTBE
#
umount $ALTROOT

if [ "$POWEROFF" = "true" ]
then
	log "################################################################"
	log "#                                                              #"
	log "#     INSTALLATION COMPLETE. PRESS ENTER TO POWER OFF          #"
	log "#                                                              #"
	log "################################################################"

	read dmy < /dev/console
	/usr/sbin/shutdown -y -g 0 -i 5
	if [ "$RUNNING_IN_SMF" = "true" ]
	then
		svcadm disable $SMF_FMRI
	fi
fi
