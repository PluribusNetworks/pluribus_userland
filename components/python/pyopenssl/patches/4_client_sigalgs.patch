--- a/OpenSSL/ssl/context.c	Fri Oct 28 11:51:18 2016 -0400
+++ b/OpenSSL/ssl/context.c	Mon Oct 31 14:45:12 2016 -0400
@@ -861,6 +861,34 @@
     }
 }
 
+static char ssl_Context_set_client_sigalgs_list_doc[] = "\n\
+This sets the supported signature algorithms associated with\n\
+client authentication\n\
+\n\
+@param client_sigalgs_list: Signature algorithms to support\n\
+(colon-separated list)\n\
+@return: None\n\
+";
+static PyObject *
+ssl_Context_set_client_sigalgs_list(ssl_ContextObj *self, PyObject *args)
+{
+    char *client_sigalgs_list;
+
+    if (!PyArg_ParseTuple(args, "s:set_client_sigalgs_list", &client_sigalgs_list))
+        return NULL;
+
+    if (!SSL_CTX_set1_client_sigalgs_list(self->ctx, client_sigalgs_list))
+    {
+        exception_from_error_queue(ssl_Error);
+        return NULL;
+    }
+    else
+    {
+        Py_INCREF(Py_None);
+        return Py_None;
+    }
+}
+
 static char ssl_Context_set_client_ca_list_doc[] = "\n\
 Set the list of preferred client certificate signers for this server context.\n\
 \n\
@@ -1165,6 +1193,7 @@
     ADD_METHOD(get_verify_depth),
     ADD_METHOD(load_tmp_dh),
     ADD_METHOD(set_cipher_list),
+    ADD_METHOD(set_client_sigalgs_list),
     ADD_METHOD(set_client_ca_list),
     ADD_METHOD(add_client_ca),
     ADD_METHOD(set_timeout),
@@ -1280,6 +1309,36 @@
     return (PyObject *)ssl_Context_init(self, i_method);
 }
 
+static int
+ctx_Converter(PyObject *obj, void **address)
+{
+	*address = PyLong_AsVoidPtr(obj);
+	return *address != NULL;
+}
+
+/*
+ * This one is the tp_new of the ContextFromCPtr type.
+ */
+static PyObject*
+ssl_ContextFromCPtr_new(PyTypeObject *subtype, PyObject *args, PyObject *kwargs) {
+    ssl_ContextFromCPtrObj *self;
+    void *ctx;
+    static char *kwlist[] = {"ctx", NULL};
+
+    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O&:ContextFromCPtr", kwlist, ctx_Converter, &ctx)) {
+        return NULL;
+    }
+
+    self = (ssl_ContextFromCPtrObj *)subtype->tp_alloc(subtype, 1);
+    if (self == NULL) {
+        return NULL;
+    }
+
+    self->ctx = ctx;
+
+    return (PyObject *)self;
+}
+
 /*
  * Call the visitproc on all contained objects.
  *
@@ -1344,6 +1403,31 @@
     PyObject_GC_Del(self);
 }
 
+/*
+ * Decref all contained objects and zero the pointers.
+ *
+ * Arguments: self - The Context object
+ * Returns:   Always 0.
+ */
+static int
+ssl_ContextFromCPtr_clear(ssl_ContextObj *self)
+{
+    return 0;
+}
+
+/*
+ * Deallocate the memory used by the ContextFromCPtrobject
+ *
+ * Arguments: self - The Context object
+ * Returns:   None
+ */
+static void
+ssl_ContextFromCPtr_dealloc(ssl_ContextObj *self)
+{
+    PyObject_GC_UnTrack((PyObject *)self);
+    ssl_ContextFromCPtr_clear(self);
+    PyObject_GC_Del(self);
+}
 
 PyTypeObject ssl_Context_Type = {
     PyOpenSSL_HEAD_INIT(&PyType_Type, 0)
@@ -1386,6 +1470,46 @@
     ssl_Context_new, /* tp_new */
 };
 
+PyTypeObject ssl_ContextFromCPtr_Type = {
+    PyOpenSSL_HEAD_INIT(&PyType_Type, 0)
+    "OpenSSL.SSL.ContextFromCPtr",
+    sizeof(ssl_ContextObj),
+    0,
+    (destructor)ssl_ContextFromCPtr_dealloc, /* tp_dealloc */
+    NULL, /* print */
+    NULL, /* tp_getattr */
+    NULL, /* setattr */
+    NULL, /* compare */
+    NULL, /* repr */
+    NULL, /* as_number */
+    NULL, /* as_sequence */
+    NULL, /* as_mapping */
+    NULL, /* hash */
+    NULL, /* call */
+    NULL, /* str */
+    NULL, /* getattro */
+    NULL, /* setattro */
+    NULL, /* as_buffer */
+    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE, /* tp_flags */
+    ssl_Context_doc, /* tp_doc */
+    NULL, /* tp_traverse */
+    NULL, /* tp_clear */
+    NULL, /* tp_richcompare */
+    0, /* tp_weaklistoffset */
+    NULL, /* tp_iter */
+    NULL, /* tp_iternext */
+    ssl_Context_methods, /* tp_methods */
+    NULL, /* tp_members */
+    NULL, /* tp_getset */
+    NULL, /* tp_base */
+    NULL, /* tp_dict */
+    NULL, /* tp_descr_get */
+    NULL, /* tp_descr_set */
+    0, /* tp_dictoffset */
+    NULL, /* tp_init */
+    NULL, /* tp_alloc */
+    ssl_ContextFromCPtr_new, /* tp_new */
+};
 
 /*
  * Initialize the Context part of the SSL sub module
@@ -1414,6 +1538,24 @@
         return 0;
     }
 
+    if (PyType_Ready(&ssl_ContextFromCPtr_Type) < 0) {
+        return 0;
+    }
+
+    /* PyModule_AddObject steals a reference.
+     */
+    Py_INCREF((PyObject *)&ssl_ContextFromCPtr_Type);
+    if (PyModule_AddObject(module, "ContextFromCPtr", (PyObject *)&ssl_ContextFromCPtr_Type) < 0) {
+        return 0;
+    }
+
+    /* PyModule_AddObject steals a reference.
+     */
+    Py_INCREF((PyObject *)&ssl_ContextFromCPtr_Type);
+    if (PyModule_AddObject(module, "ContextFromCPtrType", (PyObject *)&ssl_ContextFromCPtr_Type) < 0) {
+        return 0;
+    }
+
     return 1;
 }
 
diff -r d85b34d7fa01 OpenSSL/ssl/context.h
--- a/OpenSSL/ssl/context.h	Fri Oct 28 11:51:18 2016 -0400
+++ b/OpenSSL/ssl/context.h	Mon Oct 31 14:45:12 2016 -0400
@@ -39,5 +39,10 @@
 #define ssl_SSLv23_METHOD     (3)
 #define ssl_TLSv1_METHOD      (4)
 
+typedef struct {
+    PyObject_HEAD
+    SSL_CTX             *ctx;
+} ssl_ContextFromCPtrObj;
+
 
 #endif
